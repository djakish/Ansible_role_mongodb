---

- name: Create Root User '{{ mongodb_root_admin_name }}' {{ 'in the Replicaset' if mongodb_replication_enabled else '' }}
  any_errors_fatal: true
  mongodb_user:
    name: "{{ item.name }}"
    password: "{{ item.password }}"
    update_password: "{{ (mongodb_admin_update_password or mongodb_root_admin_exist.failed) | ternary('always', 'on_create') }}"
    state: present
    roles: "{{ item.roles }}"
    database: "{{ mongodb_login_database }}"
    login_user: "{{ (not mongodb_root_admin_exist.failed) | ternary(mongodb_root_admin_name, omit) }}"
    login_password: "{{ (not mongodb_root_admin_exist.failed) | ternary(mongodb_root_admin_password, omit) }}"
    login_host: "localhost"
    login_port: "{{ mongodb_net_port }}"
    login_database: "{{ mongodb_login_database }}"
    replica_set: "{{ (mongodb_replication_enabled and not mongodb_root_admin_exist.failed ) | ternary(mongodb_replication_replset, omit) }}"
    ssl: "{{ (mongodb_net_ssl_enabled and mongodb_net_ssl_mode == 'requireSSL') | ternary(true, false) }}"
  with_items:
    - {
      name: "{{ mongodb_root_admin_name }}",
      password: "{{ mongodb_root_admin_password }}",
      roles: "root"
      }
  tags: [mongodb, mongodb-create-admin-users]

- name: Ensure that Root User '{{ mongodb_root_admin_name }}' Was Created in the Replicaset
  community.mongodb.mongodb_status:
    login_user: "{{ mongodb_root_admin_name }}"
    login_password: "{{ mongodb_root_admin_password }}"
    login_host: "localhost"
    login_port: "{{ mongodb_net_port }}"
    login_database: "{{ mongodb_login_database }}"
    replica_set: "{{ mongodb_replication_enabled | ternary(mongodb_replication_replset, omit) }}"
    ssl: "{{ (mongodb_net_ssl_enabled and mongodb_net_ssl_mode == 'requireSSL') | ternary(true, false) }}"
    poll: 2
    interval: 1
  register: mongodb_root_admin_exist_replicaset
  changed_when: false
  when:
    - mongodb_replication_enabled
    - mongodb_master is defined
    - mongodb_master
  tags: [mongodb, mongodb-create-admin-users, mongodb-create-oplog-users, mongodb-add-users]

- name: Ensure that Root User '{{ mongodb_root_admin_name }}' Was Created in the Single Database
  community.mongodb.mongodb_info:
    login_user: "{{ mongodb_root_admin_name }}"
    login_password: "{{ mongodb_root_admin_password }}"
    login_host: "localhost"
    login_port: "{{ mongodb_net_port }}"
    login_database: "{{ mongodb_login_database }}"
    ssl: "{{ (mongodb_net_ssl_enabled and mongodb_net_ssl_mode == 'requireSSL') | ternary(true, false) }}"
  async: 3
  poll: 2
  register: mongodb_root_admin_exist_single
  changed_when: false
  when: not mongodb_replication_enabled
  tags: [mongodb, mongodb-create-admin-users, mongodb-create-oplog-users, mongodb-add-users]

- name: Set Results of Root User Existence Check
  set_fact: 
    mongodb_root_admin_exist: "{{ mongodb_root_admin_exist_replicaset | default({}) | combine(mongodb_root_admin_exist_single | default({}))  }}"
  tags: [mongodb, mongodb-create-admin-users, mongodb-create-oplog-users, mongodb-add-users]

- name: Create Administrative Users {{ 'in the Replicaset' if mongodb_replication_enabled else '' }}
  mongodb_user:
    name: "{{ item.name }}"
    password: "{{ item.password }}"
    update_password: "{{ mongodb_admin_update_password | ternary('always', 'on_create') }}"
    state: present
    roles: "{{ item.roles }}"
    database: "{{ mongodb_login_database }}"
    login_user: "{{ mongodb_root_admin_name }}"
    login_password: "{{ mongodb_root_admin_password }}"
    login_host: "{{ inventory_hostname }}"
    login_port: "{{ mongodb_net_port }}"
    login_database: "{{ mongodb_login_database }}"
    replica_set: "{{ mongodb_replication_enabled | ternary(mongodb_replication_replset, omit) }}"
    ssl: "{{ (mongodb_net_ssl_enabled and mongodb_net_ssl_mode == 'requireSSL') | ternary(true, false) }}"
  with_items:
    - {
      name: "{{ mongodb_user_admin_name }}",
      password: "{{ mongodb_user_admin_password }}",
      roles: "userAdminAnyDatabase",
      }
    - {
      name: "{{ mongodb_root_backup_name }}",
      password: "{{ mongodb_root_backup_password }}",
      roles: "backup,clusterMonitor"
      }
  tags: [mongodb, mongodb-create-admin-users]

- name: Create Oplog User in the Replicaset
  mongodb_user:
    name: "{{ item.name }}"
    password: "{{ item.password }}"
    update_password: "{{ mongodb_admin_update_password | ternary('always', 'on_create') }}"
    state: present
    roles:
      - db: local
        role: read
    database: "{{ mongodb_login_database }}"
    login_user: "{{ mongodb_root_admin_name }}"
    login_password: "{{ mongodb_root_admin_password }}"
    login_host: "{{ inventory_hostname }}"
    login_port: "{{ mongodb_net_port }}"
    login_database: "{{ mongodb_login_database }}"
    replica_set: "{{ mongodb_replication_enabled | ternary(mongodb_replication_replset, omit) }}"
    ssl: "{{ (mongodb_net_ssl_enabled and mongodb_net_ssl_mode == 'requireSSL') | ternary(true, false) }}"
  with_items:
    - "{{ mongodb_oplog_users | default([]) }}"
  when:
    - mongodb_replication_enabled
    - mongodb_master is defined
    - mongodb_master
    - item.name is defined and item.name | length > 0
    - item.password is defined and item.password | length > 0
  tags: [mongodb, mongodb-create-admin-users, mongodb-create-oplog-users]

- name: Add Normal Users {{ 'in the Replicaset' if mongodb_replication_enabled else '' }}
  mongodb_user:
    name: "{{ item.name }}"
    password: "{{ item.password }}"
    update_password: "{{ mongodb_user_update_password | ternary('always', 'on_create') }}"
    state: present
    roles: "{{ item.roles }}"
    database: "{{ item.database | default(mongodb_login_database) }}"
    login_user: "{{ mongodb_root_admin_name }}"
    login_password: "{{ mongodb_root_admin_password }}"
    login_host: "{{ inventory_hostname }}"
    login_port: "{{ mongodb_net_port }}"
    login_database: "{{ mongodb_login_database }}"
    replica_set: "{{ mongodb_replication_enabled | ternary(mongodb_replication_replset, omit) }}"
    ssl: "{{ (mongodb_net_ssl_enabled and mongodb_net_ssl_mode == 'requireSSL') | ternary(true, false) }}"
  with_items:
    - "{{ mongodb_users | default([]) }}"
  when: 
    - item.name is defined and item.name | length > 0
    - item.password is defined and item.password | length > 0
    - item.roles is defined and item.roles | length > 0
  tags: [mongodb, mongodb-add-users]
